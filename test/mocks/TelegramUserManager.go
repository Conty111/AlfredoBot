// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	models "github.com/Conty111/TelegramBotTemplate/internal/models"
	uuid "github.com/google/uuid"
	mock "github.com/stretchr/testify/mock"
)

// TelegramUserManager is an autogenerated mock type for the TelegramUserManager type
type TelegramUserManager struct {
	mock.Mock
}

// CreateUser provides a mock function with given fields: user
func (_m *TelegramUserManager) CreateUser(user *models.TelegramUser) error {
	ret := _m.Called(user)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.TelegramUser) error); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteByID provides a mock function with given fields: id
func (_m *TelegramUserManager) DeleteByID(id uuid.UUID) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteByID")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteByTelegramID provides a mock function with given fields: telegramID
func (_m *TelegramUserManager) DeleteByTelegramID(telegramID int64) error {
	ret := _m.Called(telegramID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteByTelegramID")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int64) error); ok {
		r0 = rf(telegramID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetByID provides a mock function with given fields: id
func (_m *TelegramUserManager) GetByID(id uuid.UUID) (*models.TelegramUser, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 *models.TelegramUser
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) (*models.TelegramUser, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID) *models.TelegramUser); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.TelegramUser)
		}
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByTelegramID provides a mock function with given fields: telegramID
func (_m *TelegramUserManager) GetByTelegramID(telegramID int64) (*models.TelegramUser, error) {
	ret := _m.Called(telegramID)

	if len(ret) == 0 {
		panic("no return value specified for GetByTelegramID")
	}

	var r0 *models.TelegramUser
	var r1 error
	if rf, ok := ret.Get(0).(func(int64) (*models.TelegramUser, error)); ok {
		return rf(telegramID)
	}
	if rf, ok := ret.Get(0).(func(int64) *models.TelegramUser); ok {
		r0 = rf(telegramID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.TelegramUser)
		}
	}

	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(telegramID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByUsername provides a mock function with given fields: username
func (_m *TelegramUserManager) GetByUsername(username string) (*models.TelegramUser, error) {
	ret := _m.Called(username)

	if len(ret) == 0 {
		panic("no return value specified for GetByUsername")
	}

	var r0 *models.TelegramUser
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*models.TelegramUser, error)); ok {
		return rf(username)
	}
	if rf, ok := ret.Get(0).(func(string) *models.TelegramUser); ok {
		r0 = rf(username)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.TelegramUser)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUsersByState provides a mock function with given fields: state
func (_m *TelegramUserManager) GetUsersByState(state string) ([]*models.TelegramUser, error) {
	ret := _m.Called(state)

	if len(ret) == 0 {
		panic("no return value specified for GetUsersByState")
	}

	var r0 []*models.TelegramUser
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]*models.TelegramUser, error)); ok {
		return rf(state)
	}
	if rf, ok := ret.Get(0).(func(string) []*models.TelegramUser); ok {
		r0 = rf(state)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.TelegramUser)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(state)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateByID provides a mock function with given fields: id, updates
func (_m *TelegramUserManager) UpdateByID(id uuid.UUID, updates interface{}) error {
	ret := _m.Called(id, updates)

	if len(ret) == 0 {
		panic("no return value specified for UpdateByID")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID, interface{}) error); ok {
		r0 = rf(id, updates)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateByTelegramID provides a mock function with given fields: telegramID, updates
func (_m *TelegramUserManager) UpdateByTelegramID(telegramID int64, updates interface{}) error {
	ret := _m.Called(telegramID, updates)

	if len(ret) == 0 {
		panic("no return value specified for UpdateByTelegramID")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int64, interface{}) error); ok {
		r0 = rf(telegramID, updates)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewTelegramUserManager creates a new instance of TelegramUserManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTelegramUserManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *TelegramUserManager {
	mock := &TelegramUserManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
