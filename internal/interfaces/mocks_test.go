// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package interfaces

import (
	"github.com/Conty111/AlfredoBot/internal/models"
	"github.com/google/uuid"
	mock "github.com/stretchr/testify/mock"
)

// NewMockTelegramUserProvider creates a new instance of MockTelegramUserProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTelegramUserProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTelegramUserProvider {
	mock := &MockTelegramUserProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockTelegramUserProvider is an autogenerated mock type for the TelegramUserProvider type
type MockTelegramUserProvider struct {
	mock.Mock
}

type MockTelegramUserProvider_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTelegramUserProvider) EXPECT() *MockTelegramUserProvider_Expecter {
	return &MockTelegramUserProvider_Expecter{mock: &_m.Mock}
}

// CreateUser provides a mock function for the type MockTelegramUserProvider
func (_mock *MockTelegramUserProvider) CreateUser(user *models.TelegramUser) error {
	ret := _mock.Called(user)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*models.TelegramUser) error); ok {
		r0 = returnFunc(user)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockTelegramUserProvider_CreateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUser'
type MockTelegramUserProvider_CreateUser_Call struct {
	*mock.Call
}

// CreateUser is a helper method to define mock.On call
//   - user *models.TelegramUser
func (_e *MockTelegramUserProvider_Expecter) CreateUser(user interface{}) *MockTelegramUserProvider_CreateUser_Call {
	return &MockTelegramUserProvider_CreateUser_Call{Call: _e.mock.On("CreateUser", user)}
}

func (_c *MockTelegramUserProvider_CreateUser_Call) Run(run func(user *models.TelegramUser)) *MockTelegramUserProvider_CreateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *models.TelegramUser
		if args[0] != nil {
			arg0 = args[0].(*models.TelegramUser)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockTelegramUserProvider_CreateUser_Call) Return(err error) *MockTelegramUserProvider_CreateUser_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockTelegramUserProvider_CreateUser_Call) RunAndReturn(run func(user *models.TelegramUser) error) *MockTelegramUserProvider_CreateUser_Call {
	_c.Call.Return(run)
	return _c
}

// GetByID provides a mock function for the type MockTelegramUserProvider
func (_mock *MockTelegramUserProvider) GetByID(id uuid.UUID) (*models.TelegramUser, error) {
	ret := _mock.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 *models.TelegramUser
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(uuid.UUID) (*models.TelegramUser, error)); ok {
		return returnFunc(id)
	}
	if returnFunc, ok := ret.Get(0).(func(uuid.UUID) *models.TelegramUser); ok {
		r0 = returnFunc(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.TelegramUser)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = returnFunc(id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTelegramUserProvider_GetByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByID'
type MockTelegramUserProvider_GetByID_Call struct {
	*mock.Call
}

// GetByID is a helper method to define mock.On call
//   - id uuid.UUID
func (_e *MockTelegramUserProvider_Expecter) GetByID(id interface{}) *MockTelegramUserProvider_GetByID_Call {
	return &MockTelegramUserProvider_GetByID_Call{Call: _e.mock.On("GetByID", id)}
}

func (_c *MockTelegramUserProvider_GetByID_Call) Run(run func(id uuid.UUID)) *MockTelegramUserProvider_GetByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 uuid.UUID
		if args[0] != nil {
			arg0 = args[0].(uuid.UUID)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockTelegramUserProvider_GetByID_Call) Return(telegramUser *models.TelegramUser, err error) *MockTelegramUserProvider_GetByID_Call {
	_c.Call.Return(telegramUser, err)
	return _c
}

func (_c *MockTelegramUserProvider_GetByID_Call) RunAndReturn(run func(id uuid.UUID) (*models.TelegramUser, error)) *MockTelegramUserProvider_GetByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetByTelegramID provides a mock function for the type MockTelegramUserProvider
func (_mock *MockTelegramUserProvider) GetByTelegramID(telegramID int64) (*models.TelegramUser, error) {
	ret := _mock.Called(telegramID)

	if len(ret) == 0 {
		panic("no return value specified for GetByTelegramID")
	}

	var r0 *models.TelegramUser
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(int64) (*models.TelegramUser, error)); ok {
		return returnFunc(telegramID)
	}
	if returnFunc, ok := ret.Get(0).(func(int64) *models.TelegramUser); ok {
		r0 = returnFunc(telegramID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.TelegramUser)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(int64) error); ok {
		r1 = returnFunc(telegramID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTelegramUserProvider_GetByTelegramID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByTelegramID'
type MockTelegramUserProvider_GetByTelegramID_Call struct {
	*mock.Call
}

// GetByTelegramID is a helper method to define mock.On call
//   - telegramID int64
func (_e *MockTelegramUserProvider_Expecter) GetByTelegramID(telegramID interface{}) *MockTelegramUserProvider_GetByTelegramID_Call {
	return &MockTelegramUserProvider_GetByTelegramID_Call{Call: _e.mock.On("GetByTelegramID", telegramID)}
}

func (_c *MockTelegramUserProvider_GetByTelegramID_Call) Run(run func(telegramID int64)) *MockTelegramUserProvider_GetByTelegramID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 int64
		if args[0] != nil {
			arg0 = args[0].(int64)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockTelegramUserProvider_GetByTelegramID_Call) Return(telegramUser *models.TelegramUser, err error) *MockTelegramUserProvider_GetByTelegramID_Call {
	_c.Call.Return(telegramUser, err)
	return _c
}

func (_c *MockTelegramUserProvider_GetByTelegramID_Call) RunAndReturn(run func(telegramID int64) (*models.TelegramUser, error)) *MockTelegramUserProvider_GetByTelegramID_Call {
	_c.Call.Return(run)
	return _c
}

// GetByUsername provides a mock function for the type MockTelegramUserProvider
func (_mock *MockTelegramUserProvider) GetByUsername(username string) (*models.TelegramUser, error) {
	ret := _mock.Called(username)

	if len(ret) == 0 {
		panic("no return value specified for GetByUsername")
	}

	var r0 *models.TelegramUser
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (*models.TelegramUser, error)); ok {
		return returnFunc(username)
	}
	if returnFunc, ok := ret.Get(0).(func(string) *models.TelegramUser); ok {
		r0 = returnFunc(username)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.TelegramUser)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(username)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTelegramUserProvider_GetByUsername_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByUsername'
type MockTelegramUserProvider_GetByUsername_Call struct {
	*mock.Call
}

// GetByUsername is a helper method to define mock.On call
//   - username string
func (_e *MockTelegramUserProvider_Expecter) GetByUsername(username interface{}) *MockTelegramUserProvider_GetByUsername_Call {
	return &MockTelegramUserProvider_GetByUsername_Call{Call: _e.mock.On("GetByUsername", username)}
}

func (_c *MockTelegramUserProvider_GetByUsername_Call) Run(run func(username string)) *MockTelegramUserProvider_GetByUsername_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockTelegramUserProvider_GetByUsername_Call) Return(telegramUser *models.TelegramUser, err error) *MockTelegramUserProvider_GetByUsername_Call {
	_c.Call.Return(telegramUser, err)
	return _c
}

func (_c *MockTelegramUserProvider_GetByUsername_Call) RunAndReturn(run func(username string) (*models.TelegramUser, error)) *MockTelegramUserProvider_GetByUsername_Call {
	_c.Call.Return(run)
	return _c
}

// GetUsersByState provides a mock function for the type MockTelegramUserProvider
func (_mock *MockTelegramUserProvider) GetUsersByState(state string) ([]*models.TelegramUser, error) {
	ret := _mock.Called(state)

	if len(ret) == 0 {
		panic("no return value specified for GetUsersByState")
	}

	var r0 []*models.TelegramUser
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) ([]*models.TelegramUser, error)); ok {
		return returnFunc(state)
	}
	if returnFunc, ok := ret.Get(0).(func(string) []*models.TelegramUser); ok {
		r0 = returnFunc(state)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.TelegramUser)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(state)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTelegramUserProvider_GetUsersByState_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUsersByState'
type MockTelegramUserProvider_GetUsersByState_Call struct {
	*mock.Call
}

// GetUsersByState is a helper method to define mock.On call
//   - state string
func (_e *MockTelegramUserProvider_Expecter) GetUsersByState(state interface{}) *MockTelegramUserProvider_GetUsersByState_Call {
	return &MockTelegramUserProvider_GetUsersByState_Call{Call: _e.mock.On("GetUsersByState", state)}
}

func (_c *MockTelegramUserProvider_GetUsersByState_Call) Run(run func(state string)) *MockTelegramUserProvider_GetUsersByState_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockTelegramUserProvider_GetUsersByState_Call) Return(telegramUsers []*models.TelegramUser, err error) *MockTelegramUserProvider_GetUsersByState_Call {
	_c.Call.Return(telegramUsers, err)
	return _c
}

func (_c *MockTelegramUserProvider_GetUsersByState_Call) RunAndReturn(run func(state string) ([]*models.TelegramUser, error)) *MockTelegramUserProvider_GetUsersByState_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockTelegramUserManager creates a new instance of MockTelegramUserManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTelegramUserManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTelegramUserManager {
	mock := &MockTelegramUserManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockTelegramUserManager is an autogenerated mock type for the TelegramUserManager type
type MockTelegramUserManager struct {
	mock.Mock
}

type MockTelegramUserManager_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTelegramUserManager) EXPECT() *MockTelegramUserManager_Expecter {
	return &MockTelegramUserManager_Expecter{mock: &_m.Mock}
}

// CreateUser provides a mock function for the type MockTelegramUserManager
func (_mock *MockTelegramUserManager) CreateUser(user *models.TelegramUser) error {
	ret := _mock.Called(user)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*models.TelegramUser) error); ok {
		r0 = returnFunc(user)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockTelegramUserManager_CreateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUser'
type MockTelegramUserManager_CreateUser_Call struct {
	*mock.Call
}

// CreateUser is a helper method to define mock.On call
//   - user *models.TelegramUser
func (_e *MockTelegramUserManager_Expecter) CreateUser(user interface{}) *MockTelegramUserManager_CreateUser_Call {
	return &MockTelegramUserManager_CreateUser_Call{Call: _e.mock.On("CreateUser", user)}
}

func (_c *MockTelegramUserManager_CreateUser_Call) Run(run func(user *models.TelegramUser)) *MockTelegramUserManager_CreateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *models.TelegramUser
		if args[0] != nil {
			arg0 = args[0].(*models.TelegramUser)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockTelegramUserManager_CreateUser_Call) Return(err error) *MockTelegramUserManager_CreateUser_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockTelegramUserManager_CreateUser_Call) RunAndReturn(run func(user *models.TelegramUser) error) *MockTelegramUserManager_CreateUser_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteByID provides a mock function for the type MockTelegramUserManager
func (_mock *MockTelegramUserManager) DeleteByID(id uuid.UUID) error {
	ret := _mock.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteByID")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(uuid.UUID) error); ok {
		r0 = returnFunc(id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockTelegramUserManager_DeleteByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteByID'
type MockTelegramUserManager_DeleteByID_Call struct {
	*mock.Call
}

// DeleteByID is a helper method to define mock.On call
//   - id uuid.UUID
func (_e *MockTelegramUserManager_Expecter) DeleteByID(id interface{}) *MockTelegramUserManager_DeleteByID_Call {
	return &MockTelegramUserManager_DeleteByID_Call{Call: _e.mock.On("DeleteByID", id)}
}

func (_c *MockTelegramUserManager_DeleteByID_Call) Run(run func(id uuid.UUID)) *MockTelegramUserManager_DeleteByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 uuid.UUID
		if args[0] != nil {
			arg0 = args[0].(uuid.UUID)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockTelegramUserManager_DeleteByID_Call) Return(err error) *MockTelegramUserManager_DeleteByID_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockTelegramUserManager_DeleteByID_Call) RunAndReturn(run func(id uuid.UUID) error) *MockTelegramUserManager_DeleteByID_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteByTelegramID provides a mock function for the type MockTelegramUserManager
func (_mock *MockTelegramUserManager) DeleteByTelegramID(telegramID int64) error {
	ret := _mock.Called(telegramID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteByTelegramID")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(int64) error); ok {
		r0 = returnFunc(telegramID)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockTelegramUserManager_DeleteByTelegramID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteByTelegramID'
type MockTelegramUserManager_DeleteByTelegramID_Call struct {
	*mock.Call
}

// DeleteByTelegramID is a helper method to define mock.On call
//   - telegramID int64
func (_e *MockTelegramUserManager_Expecter) DeleteByTelegramID(telegramID interface{}) *MockTelegramUserManager_DeleteByTelegramID_Call {
	return &MockTelegramUserManager_DeleteByTelegramID_Call{Call: _e.mock.On("DeleteByTelegramID", telegramID)}
}

func (_c *MockTelegramUserManager_DeleteByTelegramID_Call) Run(run func(telegramID int64)) *MockTelegramUserManager_DeleteByTelegramID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 int64
		if args[0] != nil {
			arg0 = args[0].(int64)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockTelegramUserManager_DeleteByTelegramID_Call) Return(err error) *MockTelegramUserManager_DeleteByTelegramID_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockTelegramUserManager_DeleteByTelegramID_Call) RunAndReturn(run func(telegramID int64) error) *MockTelegramUserManager_DeleteByTelegramID_Call {
	_c.Call.Return(run)
	return _c
}

// GetByID provides a mock function for the type MockTelegramUserManager
func (_mock *MockTelegramUserManager) GetByID(id uuid.UUID) (*models.TelegramUser, error) {
	ret := _mock.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 *models.TelegramUser
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(uuid.UUID) (*models.TelegramUser, error)); ok {
		return returnFunc(id)
	}
	if returnFunc, ok := ret.Get(0).(func(uuid.UUID) *models.TelegramUser); ok {
		r0 = returnFunc(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.TelegramUser)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = returnFunc(id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTelegramUserManager_GetByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByID'
type MockTelegramUserManager_GetByID_Call struct {
	*mock.Call
}

// GetByID is a helper method to define mock.On call
//   - id uuid.UUID
func (_e *MockTelegramUserManager_Expecter) GetByID(id interface{}) *MockTelegramUserManager_GetByID_Call {
	return &MockTelegramUserManager_GetByID_Call{Call: _e.mock.On("GetByID", id)}
}

func (_c *MockTelegramUserManager_GetByID_Call) Run(run func(id uuid.UUID)) *MockTelegramUserManager_GetByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 uuid.UUID
		if args[0] != nil {
			arg0 = args[0].(uuid.UUID)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockTelegramUserManager_GetByID_Call) Return(telegramUser *models.TelegramUser, err error) *MockTelegramUserManager_GetByID_Call {
	_c.Call.Return(telegramUser, err)
	return _c
}

func (_c *MockTelegramUserManager_GetByID_Call) RunAndReturn(run func(id uuid.UUID) (*models.TelegramUser, error)) *MockTelegramUserManager_GetByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetByTelegramID provides a mock function for the type MockTelegramUserManager
func (_mock *MockTelegramUserManager) GetByTelegramID(telegramID int64) (*models.TelegramUser, error) {
	ret := _mock.Called(telegramID)

	if len(ret) == 0 {
		panic("no return value specified for GetByTelegramID")
	}

	var r0 *models.TelegramUser
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(int64) (*models.TelegramUser, error)); ok {
		return returnFunc(telegramID)
	}
	if returnFunc, ok := ret.Get(0).(func(int64) *models.TelegramUser); ok {
		r0 = returnFunc(telegramID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.TelegramUser)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(int64) error); ok {
		r1 = returnFunc(telegramID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTelegramUserManager_GetByTelegramID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByTelegramID'
type MockTelegramUserManager_GetByTelegramID_Call struct {
	*mock.Call
}

// GetByTelegramID is a helper method to define mock.On call
//   - telegramID int64
func (_e *MockTelegramUserManager_Expecter) GetByTelegramID(telegramID interface{}) *MockTelegramUserManager_GetByTelegramID_Call {
	return &MockTelegramUserManager_GetByTelegramID_Call{Call: _e.mock.On("GetByTelegramID", telegramID)}
}

func (_c *MockTelegramUserManager_GetByTelegramID_Call) Run(run func(telegramID int64)) *MockTelegramUserManager_GetByTelegramID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 int64
		if args[0] != nil {
			arg0 = args[0].(int64)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockTelegramUserManager_GetByTelegramID_Call) Return(telegramUser *models.TelegramUser, err error) *MockTelegramUserManager_GetByTelegramID_Call {
	_c.Call.Return(telegramUser, err)
	return _c
}

func (_c *MockTelegramUserManager_GetByTelegramID_Call) RunAndReturn(run func(telegramID int64) (*models.TelegramUser, error)) *MockTelegramUserManager_GetByTelegramID_Call {
	_c.Call.Return(run)
	return _c
}

// GetByUsername provides a mock function for the type MockTelegramUserManager
func (_mock *MockTelegramUserManager) GetByUsername(username string) (*models.TelegramUser, error) {
	ret := _mock.Called(username)

	if len(ret) == 0 {
		panic("no return value specified for GetByUsername")
	}

	var r0 *models.TelegramUser
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (*models.TelegramUser, error)); ok {
		return returnFunc(username)
	}
	if returnFunc, ok := ret.Get(0).(func(string) *models.TelegramUser); ok {
		r0 = returnFunc(username)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.TelegramUser)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(username)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTelegramUserManager_GetByUsername_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByUsername'
type MockTelegramUserManager_GetByUsername_Call struct {
	*mock.Call
}

// GetByUsername is a helper method to define mock.On call
//   - username string
func (_e *MockTelegramUserManager_Expecter) GetByUsername(username interface{}) *MockTelegramUserManager_GetByUsername_Call {
	return &MockTelegramUserManager_GetByUsername_Call{Call: _e.mock.On("GetByUsername", username)}
}

func (_c *MockTelegramUserManager_GetByUsername_Call) Run(run func(username string)) *MockTelegramUserManager_GetByUsername_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockTelegramUserManager_GetByUsername_Call) Return(telegramUser *models.TelegramUser, err error) *MockTelegramUserManager_GetByUsername_Call {
	_c.Call.Return(telegramUser, err)
	return _c
}

func (_c *MockTelegramUserManager_GetByUsername_Call) RunAndReturn(run func(username string) (*models.TelegramUser, error)) *MockTelegramUserManager_GetByUsername_Call {
	_c.Call.Return(run)
	return _c
}

// GetUsersByState provides a mock function for the type MockTelegramUserManager
func (_mock *MockTelegramUserManager) GetUsersByState(state string) ([]*models.TelegramUser, error) {
	ret := _mock.Called(state)

	if len(ret) == 0 {
		panic("no return value specified for GetUsersByState")
	}

	var r0 []*models.TelegramUser
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) ([]*models.TelegramUser, error)); ok {
		return returnFunc(state)
	}
	if returnFunc, ok := ret.Get(0).(func(string) []*models.TelegramUser); ok {
		r0 = returnFunc(state)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.TelegramUser)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(state)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTelegramUserManager_GetUsersByState_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUsersByState'
type MockTelegramUserManager_GetUsersByState_Call struct {
	*mock.Call
}

// GetUsersByState is a helper method to define mock.On call
//   - state string
func (_e *MockTelegramUserManager_Expecter) GetUsersByState(state interface{}) *MockTelegramUserManager_GetUsersByState_Call {
	return &MockTelegramUserManager_GetUsersByState_Call{Call: _e.mock.On("GetUsersByState", state)}
}

func (_c *MockTelegramUserManager_GetUsersByState_Call) Run(run func(state string)) *MockTelegramUserManager_GetUsersByState_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockTelegramUserManager_GetUsersByState_Call) Return(telegramUsers []*models.TelegramUser, err error) *MockTelegramUserManager_GetUsersByState_Call {
	_c.Call.Return(telegramUsers, err)
	return _c
}

func (_c *MockTelegramUserManager_GetUsersByState_Call) RunAndReturn(run func(state string) ([]*models.TelegramUser, error)) *MockTelegramUserManager_GetUsersByState_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateByID provides a mock function for the type MockTelegramUserManager
func (_mock *MockTelegramUserManager) UpdateByID(id uuid.UUID, updates interface{}) error {
	ret := _mock.Called(id, updates)

	if len(ret) == 0 {
		panic("no return value specified for UpdateByID")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(uuid.UUID, interface{}) error); ok {
		r0 = returnFunc(id, updates)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockTelegramUserManager_UpdateByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateByID'
type MockTelegramUserManager_UpdateByID_Call struct {
	*mock.Call
}

// UpdateByID is a helper method to define mock.On call
//   - id uuid.UUID
//   - updates interface{}
func (_e *MockTelegramUserManager_Expecter) UpdateByID(id interface{}, updates interface{}) *MockTelegramUserManager_UpdateByID_Call {
	return &MockTelegramUserManager_UpdateByID_Call{Call: _e.mock.On("UpdateByID", id, updates)}
}

func (_c *MockTelegramUserManager_UpdateByID_Call) Run(run func(id uuid.UUID, updates interface{})) *MockTelegramUserManager_UpdateByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 uuid.UUID
		if args[0] != nil {
			arg0 = args[0].(uuid.UUID)
		}
		var arg1 interface{}
		if args[1] != nil {
			arg1 = args[1].(interface{})
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockTelegramUserManager_UpdateByID_Call) Return(err error) *MockTelegramUserManager_UpdateByID_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockTelegramUserManager_UpdateByID_Call) RunAndReturn(run func(id uuid.UUID, updates interface{}) error) *MockTelegramUserManager_UpdateByID_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateByTelegramID provides a mock function for the type MockTelegramUserManager
func (_mock *MockTelegramUserManager) UpdateByTelegramID(telegramID int64, updates interface{}) error {
	ret := _mock.Called(telegramID, updates)

	if len(ret) == 0 {
		panic("no return value specified for UpdateByTelegramID")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(int64, interface{}) error); ok {
		r0 = returnFunc(telegramID, updates)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockTelegramUserManager_UpdateByTelegramID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateByTelegramID'
type MockTelegramUserManager_UpdateByTelegramID_Call struct {
	*mock.Call
}

// UpdateByTelegramID is a helper method to define mock.On call
//   - telegramID int64
//   - updates interface{}
func (_e *MockTelegramUserManager_Expecter) UpdateByTelegramID(telegramID interface{}, updates interface{}) *MockTelegramUserManager_UpdateByTelegramID_Call {
	return &MockTelegramUserManager_UpdateByTelegramID_Call{Call: _e.mock.On("UpdateByTelegramID", telegramID, updates)}
}

func (_c *MockTelegramUserManager_UpdateByTelegramID_Call) Run(run func(telegramID int64, updates interface{})) *MockTelegramUserManager_UpdateByTelegramID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 int64
		if args[0] != nil {
			arg0 = args[0].(int64)
		}
		var arg1 interface{}
		if args[1] != nil {
			arg1 = args[1].(interface{})
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockTelegramUserManager_UpdateByTelegramID_Call) Return(err error) *MockTelegramUserManager_UpdateByTelegramID_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockTelegramUserManager_UpdateByTelegramID_Call) RunAndReturn(run func(telegramID int64, updates interface{}) error) *MockTelegramUserManager_UpdateByTelegramID_Call {
	_c.Call.Return(run)
	return _c
}
